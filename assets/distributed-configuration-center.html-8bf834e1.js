import{_ as n,X as l,Y as i,Z as t,a1 as e,$ as r,a2 as a,C as s}from"./framework-f0219f66.js";const d={},p=a('<h2 id="为什么要用配置中心" tabindex="-1"><a class="header-anchor" href="#为什么要用配置中心" aria-hidden="true">#</a> 为什么要用配置中心？</h2><p>微服务下，业务的发展一般会导致服务数量的增加，进而导致程序配置（服务地址、数据库参数等等）增多。传统的配置文件的方式已经无法满足当前需求，主要有下面几点原因：</p><ul><li>安全性得不到保障：配置放在代码库中容易泄露。</li><li>时效性不行：修改配置需要重启服务才能生效。</li><li>不支持权限控制 ：没有对配置的修改、发布等操作进行严格的权限控制。</li><li>不支持配置集中管理 ： 配置文件过于分散，不方便管理。</li><li>......</li></ul><p>另外，配置中心通常会自带版本跟踪，会记录配置的修改记录，记录的内容包括修改人、修改时间、修改内容等等。</p><p>虽然通过 Git 版本管理我们也能追溯配置的修改记录，但是配置中心提供的配置版本管理功能更全面。并且，配置中心通常会在配置版本管理的基础上支持配置一键回滚。</p><p><img src="https://pics-cloud.oss-cn-beijing.aliyuncs.com/202303192048659.png" alt="d3e6626e-2120-4072-a274-b9d85b307037 (2)"></p><p>一些功能更全面的配置中心比如Apollo甚至还支持灰度发布。</p><h2 id="常见的配置中心有哪些" tabindex="-1"><a class="header-anchor" href="#常见的配置中心有哪些" aria-hidden="true">#</a> 常见的配置中心有哪些？</h2>',8),c={href:"https://cloud.spring.io/spring-cloud-config/reference/html/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/alibaba/nacos",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/apolloconfig/apollo",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/knightliao/disconf",target:"_blank",rel:"noopener noreferrer"},u={href:"https://github.com/Qihoo360/QConf",target:"_blank",rel:"noopener noreferrer"},_=a('<p>Disconf 和 Qconf 已经没有维护，生态也并不活跃，并不建议使用，在做配置中心技术选型的时候可以跳过。</p><p>如果你的技术选型是 Kubernetes 的话，可以考虑使用 K8s ConfigMap 来作为配置中心。</p><p>Apollo 和 Nacos 我个人更喜欢，两者都是国内公司开源的知名项目，项目社区都比较活跃且都还在维护中。Nacos 是阿里开源的，Apollo 是携程开源的。Nacos 使用起来比较简单，并且还可以直接用来做服务发现及管理。Apollo 只能用来做配置管理，使用相对复杂一些。</p><p>如果你的项目仅仅需要配置中心的话，建议使用 Apollo 。如果你的项目需要配置中心的同时还需要服务发现及管理的话，那就更建议使用 Nacos。</p><p>Spring Cloud Config 属于 Spring Cloud 生态组件，可以和 Spring Cloud 体系无缝整合。由于基于 Git 存储配置，因此 Spring Cloud Config 的整体设计很简单。</p><h2 id="apollo-vs-nacos-vs-spring-cloud-config" tabindex="-1"><a class="header-anchor" href="#apollo-vs-nacos-vs-spring-cloud-config" aria-hidden="true">#</a> Apollo vs Nacos vs Spring Cloud Config</h2><table><thead><tr><th>功能点</th><th>Apollo</th><th>Nacos</th><th>Spring Cloud Config</th></tr></thead><tbody><tr><td>配置界面</td><td>支持</td><td>支持</td><td>无（需要通过 Git 操作）</td></tr><tr><td>配置实时生效</td><td>支持(HTTP 长轮询 1s 内)</td><td>支持(HTTP 长轮询 1s 内)</td><td>重启生效，或手动 refresh 生效</td></tr><tr><td>版本管理</td><td>支持</td><td>支持</td><td>支持（依赖 Git）</td></tr><tr><td>权限管理</td><td>支持</td><td>支持</td><td>支持（依赖 Git）</td></tr><tr><td>灰度发布</td><td>支持</td><td>支持（Nacos 1.1.0 版本开始支持灰度配置）</td><td>不支持</td></tr><tr><td>配置回滚</td><td>支持</td><td>支持</td><td>支持（依赖 Git）</td></tr><tr><td>告警通知</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td>多语言</td><td>主流语言，Open API</td><td>主流语言，Open API</td><td>只支持 Spring 应用</td></tr><tr><td>多环境</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td>监听查询</td><td>支持</td><td>支持</td><td>支持</td></tr></tbody></table><p>Apollo 和 Nacos 提供了更多开箱即用的功能，更适合用来作为配置中心。</p><p>Nacos 使用起来比较简单，并且还可以直接用来做服务发现及管理。Apollo 只能用来做配置管理，使用相对复杂一些。</p><p>Apollo 在配置管理方面做的更加全面，就比如说虽然 Nacos 在 1.1.0 版本开始支持灰度配置，但 Nacos 的灰度配置功能实现的比较简单，Apollo 实现的灰度配置功能就相对更完善一些。不过，Nacos 提供的配置中心功能已经可以满足绝大部分项目的需求了。</p><p><strong>一个完备配置中心需要具备哪些功能？</strong></p><p>如果我们需要自己设计一个配置中心的话，需要考虑哪些东西呢？</p><p>简单说说我的看法：</p><ul><li><strong>权限控制</strong> ：配置的修改、发布等操作需要严格的权限控制。</li><li><strong>日志记录</strong> ： 配置的修改、发布等操需要记录完整的日志，便于后期排查问题。</li><li><strong>配置推送</strong> ： 推送模式通常由两种：</li></ul><p>○推 ：实时性变更，配置更新后推送给应用。需要应用和配置中心保持长连接，复杂度高。 ○拉 ：实时性较差，应用隔一段时间手动拉取配置。 ○推拉结合</p><ul><li><strong>灰度发布</strong> ：支持配置只推给部分应用。</li><li><strong>易操作</strong> ： 提供 Web 界面方便配置修改和发布。</li><li><strong>版本跟踪</strong> ：所有的配置发布都有版本概念，从而可以方便的支持配置的回滚。</li><li><strong>支持配置回滚</strong> ： 我们一键回滚配置到指定的位置，这个需要和版本跟踪结合使用。</li><li>......</li></ul><h2 id="以-apollo-为例介绍配置中心的设计" tabindex="-1"><a class="header-anchor" href="#以-apollo-为例介绍配置中心的设计" aria-hidden="true">#</a> 以 Apollo 为例介绍配置中心的设计</h2><h3 id="apollo-介绍" tabindex="-1"><a class="header-anchor" href="#apollo-介绍" aria-hidden="true">#</a> Apollo 介绍</h3><p>根据 Apollo 官方介绍：</p>',19),b={href:"https://github.com/ctripcorp/apollo",target:"_blank",rel:"noopener noreferrer"},m=a("<p>服务端基于 Spring Boot 和 Spring Cloud 开发，打包后可以直接运行，不需要额外安装 Tomcat 等应用容器。</p><p>Java 客户端不依赖任何框架，能够运行于所有 Java 运行时环境，同时对 Spring/Spring Boot 环境也有较好的支持。</p><p>Apollo 特性：</p><ul><li><strong>配置修改实时生效（热发布）</strong> （1s 即可接收到最新配置）</li><li><strong>灰度发布</strong> （配置只推给部分应用）</li><li><strong>部署简单</strong> （只依赖 MySQL）</li><li><strong>跨语言</strong> （提供了 HTTP 接口，不限制编程语言）</li><li>......</li></ul>",4),v={href:"https://www.apolloconfig.com/#/zh/usage/apollo-user-guide",target:"_blank",rel:"noopener noreferrer"},S=t("p",null,"相关阅读：",-1),A={href:"https://mp.weixin.qq.com/s/Ge14UeY9Gm2Hrk--E47eJQ",target:"_blank",rel:"noopener noreferrer"},C={href:"https://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&mid=2247484920&idx=1&sn=76d91ce217bf508aa2ee7156e1ba0994&source=41#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},N=a('<p><strong>Apollo 架构解析</strong></p><p>官方给出的 Apollo 基础模型非常简单：</p><p><img src="https://pics-cloud.oss-cn-beijing.aliyuncs.com/202303192057954.png" alt="deeb8344-5c39-483f-a85e-1f056fcd8c6a (1)"></p><p>1用户通过 Apollo 配置中心修改/发布配置， 2Apollo 配置中心通知应用配置已经更改 3应用访问 Apollo 配置中心获取最新的配置</p><p>官方给出的架构图如下：</p><p><img src="https://pics-cloud.oss-cn-beijing.aliyuncs.com/202303192058812.png" alt="5a92344b-1b99-4e84-ad83-dce41e3ee48c (2)"></p><ul><li><strong>Client 端（客户端，用于应用获取配置）流程</strong> ：Client 通过域名走 slb（软件负载均衡）访问 Meta Server，Meta Server 访问 Eureka 服务注册中心获取 Config Service 服务列表（IP+Port）。有了 IP+Port，我们就能访问 Config Service 暴露的服务比如通过 GET 请求获取配置的接口（/configs/{appId}/{clusterName}/{namespace:.+}）即可获取配置。</li><li><strong>Portal 端（UI 界面，用于可视化配置管理）流程</strong> ：Portal 端通过域名走 slb（软件负载均衡）访问 Meta Server，Meta Server 访问 Eureka 服务注册中心获取 Admin Service 服务列表（IP+Port）。有了 IP+Port，我们就能访问 Admin Service 暴露的服务比如通过 POST 请求访问发布配置的接口（/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/releases）即可发布配置。</li></ul>',7),P={href:"https://mp.weixin.qq.com/s/-hUaQPzfsl9Lm3IqQW3VDQ",target:"_blank",rel:"noopener noreferrer"},x=a('<p>我会从上到下依次介绍架构图中涉及到的所有角色的作用。</p><h4 id="client" tabindex="-1"><a class="header-anchor" href="#client" aria-hidden="true">#</a> Client</h4><p>Apollo 官方提供的客户端，目前有 Java 和.Net 版本。非 Java 和.Net 应用可以通过调用 HTTP 接口来使用 Apollo。</p><p>Client 的作用主要就是提供一些开箱即用的方法方便应用获取以及实时更新配置。</p><p>比如你通过下面的几行代码就能获取到 someKey 对应的实时最新的配置值：</p><p>再比如你通过下面的代码就能监听配置变化：</p><h4 id="portal" tabindex="-1"><a class="header-anchor" href="#portal" aria-hidden="true">#</a> Portal</h4><p>Portal 实际就是一个帮助我们修改和发布配置的 UI 界面。</p><p><img src="https://pics-cloud.oss-cn-beijing.aliyuncs.com/202303192100462.png" alt="07a96038-b285-4d99-a0de-25bd58d86f3f (1)"></p><h4 id="software-load-balancer" tabindex="-1"><a class="header-anchor" href="#software-load-balancer" aria-hidden="true">#</a> （Software） Load Balancer</h4><p>为了实现 MetaServer 的高可用，MetaServer 通常以集群的形式部署。</p><p>Client/Portal 直接访问 （Software） Load Balancer ，然后，再由其进行负载均衡和流量转发。</p><h4 id="meta-server" tabindex="-1"><a class="header-anchor" href="#meta-server" aria-hidden="true">#</a> Meta Server</h4><p>为了实现跨语言使用，通常的做法就是暴露 HTTP 接口。为此，Apollo 引入了 MetaServer。</p><p>Meta Server 其实就是 Eureka 的 Proxy，作用就是将 Eureka 的服务发现接口以 HTTP 接口的形式暴露出来。 这样的话，我们通过 HTTP 请求就可以访问到 Config Service 和 AdminService。</p><p>通常情况下，我们都是建议基于 Meta Server 机制来实现 Config Service 的服务发现，这样可以实现 Config Service 的高可用。不过， 你也可以选择跳过 MetaServer，直接指定 Config Service 地址（apollo-client 0.11.0 及以上版本）。</p><h4 id="config-service" tabindex="-1"><a class="header-anchor" href="#config-service" aria-hidden="true">#</a> Config Service</h4><p>主要用于 Client 对配置的获取以及实时更新。</p><h4 id="admin-service" tabindex="-1"><a class="header-anchor" href="#admin-service" aria-hidden="true">#</a> Admin Service</h4><p>主要用于 Portal 对配置的更新。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',21),k={href:"https://nacos.io/zh-cn/blog/nacos%201.2.0%20guide.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://nacos.io/zh-cn/blog/nacos%201.1.0.html",target:"_blank",rel:"noopener noreferrer"},T={href:"https://www.apolloconfig.com/#/zh/faq/faq",target:"_blank",rel:"noopener noreferrer"},M={href:"https://www.itshangxp.com/spring-cloud/spring-cloud-config-center/",target:"_blank",rel:"noopener noreferrer"};function I(z,q){const o=s("ExternalLinkIcon");return l(),i("div",null,[p,t("p",null,[t("a",c,[e("Spring Cloud Config"),r(o)]),e("、"),t("a",h,[e("Nacos"),r(o)]),e(" 、"),t("a",g,[e("Apollo"),r(o)]),e("、K8s ConfigMap 、"),t("a",f,[e("Disconf"),r(o)]),e(" 、"),t("a",u,[e("Qconf"),r(o)]),e(" 都可以用来做配置中心。")]),_,t("p",null,[t("a",b,[e("Apollo"),r(o)]),e("（阿波罗）是携程框架部门研发的分布式配置中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场景。")]),m,t("p",null,[e("关于如何使用 Apollo 可以查看 "),t("a",v,[e("Apollo 官方使用指南"),r(o)]),e("。")]),S,t("ul",null,[t("li",null,[t("a",A,[e("Apollo 在有赞的实践"),r(o)])]),t("li",null,[t("a",C,[e("分布式配置中心选型，为什么选择 Apollo？—微观技术-2021-04-23"),r(o)])])]),N,t("p",null,[e("另外，杨波老师的"),t("a",P,[e("微服务架构~携程 Apollo 配置中心架构剖析"),r(o)]),e("这篇文章对 Apollo 的架构做了简化，值得一看。")]),x,t("ul",null,[t("li",null,[e("Nacos 1.2.0 权限控制介绍和使用："),t("a",k,[e("https://nacos.io/zh-cn/blog/nacos 1.2.0 guide.html"),r(o)])]),t("li",null,[e("Nacos 1.1.0 发布，支持灰度配置和地址服务器模式："),t("a",w,[e("https://nacos.io/zh-cn/blog/nacos 1.1.0.html"),r(o)])]),t("li",null,[e("Apollo 常见问题解答："),t("a",T,[e("https://www.apolloconfig.com/#/zh/faq/faq"),r(o)])]),t("li",null,[e("微服务配置中心选型比较："),t("a",M,[e("https://www.itshangxp.com/spring-cloud/spring-cloud-config-center/"),r(o)])])])])}const Q=n(d,[["render",I],["__file","distributed-configuration-center.html.vue"]]);export{Q as default};
