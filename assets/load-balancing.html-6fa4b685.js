import{_ as p,X as o,Y as t,Z as a,a1 as n,$ as i,a2 as s,C as l}from"./framework-f0219f66.js";const r={},c=s('<p><strong>相关面试题</strong> ：</p><ul><li>服务端负载均衡一般怎么做？</li><li>四层负载均衡和七层负载均衡的区别？</li><li>负载均衡的常见算法有哪些？</li><li>七层负载均衡常见解决方案有哪些？</li><li>客户端负载均衡的常见解决方案有哪些？</li></ul><h2 id="什么是负载均衡" tabindex="-1"><a class="header-anchor" href="#什么是负载均衡" aria-hidden="true">#</a> 什么是负载均衡？</h2><p><strong>负载均衡</strong> 指的是将用户请求分摊到不同的服务器上处理，以提高系统整体的并发处理能力以及可靠性。负载均衡服务可以有由专门的软件或者硬件来完成，一般情况下，硬件的性能更好，软件的价格更便宜（后文会详细介绍到）。</p>',4),d={href:"https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247519384&idx=1&sn=bc7e71af75350b755f04ca4178395b1a&chksm=cea1c353f9d64a458f797696d4144b4d6e58639371a4612b8e4d106d83a66d2289e7b2cd7431&token=660789642&lang=zh_CN&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},u=s(`<p><img src="https://pics-cloud.oss-cn-beijing.aliyuncs.com/202303212327423.png" alt="image-20230321232007513">&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=)</p><p>负载均衡是一种比较常用且实施起来较为简单的提高系统并发能力和可靠性的手段，不论是单体架构的系统还是微服务架构的系统几乎都会用到。</p><p><strong>负载均衡通常分为哪两种？</strong></p><p>负载均衡可以简单分为 <strong>服务端负载均衡</strong> 和 <strong>客户端负载均衡</strong> 这两种。</p><p>服务端负载均衡涉及到的知识点更多，工作中遇到的也比较多，因为，我会花更多时间来介绍。</p><h3 id="服务端负载均衡" tabindex="-1"><a class="header-anchor" href="#服务端负载均衡" aria-hidden="true">#</a> 服务端负载均衡</h3><p><strong>服务端负载均衡</strong> 主要应用在 <strong>系统外部请求</strong> 和 <strong>网关层</strong> 之间，可以使用 <strong>软件</strong> 或者 <strong>硬件</strong> 实现。</p><p>下图是我画的一个简单的基于 Nginx 的服务端负载均衡示意图：</p><p><img src="https://pics-cloud.oss-cn-beijing.aliyuncs.com/202303212327431.png" alt="image-20230321232033026"></p><p><strong>硬件负载均衡</strong> 通过专门的硬件设备（比如 <strong>F5、A10、Array</strong> ）实现负载均衡功能。</p><p>硬件负载均衡的优势是性能很强且稳定，缺点就是实在是太贵了。像基础款的 F5 最低也要 20 多万，绝大部分公司是根本负担不起的，业务量不大的话，真没必要非要去弄个硬件来做负载均衡，用软件负载均衡就足够了！</p><p>在我们日常开发中，一般很难接触到硬件负载均衡，接触的比较多的还是 <strong>软件负载均衡</strong> 。软件负载均衡通过软件（比如 <strong>LVS、Nginx、HAproxy</strong> ）实现负载均衡功能，性能虽然差一些，但价格便宜啊！像基础款的 Linux 服务器也就几千，性能好一点的 2~3 万的就很不错了。</p><p>根据 OSI 模型，服务端负载均衡还可以分为：</p><ul><li>二层负载均衡</li><li>三层负载均衡</li><li>四层负载均衡</li><li>七层负载均衡</li></ul><p>最常见的是四层和七层负载均衡，因此，本文也是重点介绍这两种负载均衡。</p><p><img src="https://pics-cloud.oss-cn-beijing.aliyuncs.com/202303212327462.png" alt="image-20230321232112547"></p><ul><li><strong>四层负载均衡</strong> 工作在 OSI 模型第四层，也就是传输层，这一层的主要协议是 TCP/UDP，负载均衡器在这一层能够看到数据包里的源端口地址以及目的端口地址，会基于这些信息通过一定的负载均衡算法将数据包转发到后端真实服务器。</li><li><strong>七层负载均衡</strong> 工作在 OSI 模型第七层，也就是应用层，这一层的主要协议是 HTTP 。这一层的负载均衡比四层负载均衡路由网络请求的方式更加复杂，它会读取报文的数据部分（比如说我们的 HTTP 部分的报文），然后根据读取到的数据内容（如 URL、Cookie）做出负载均衡决策。</li></ul><p>七层负载均衡比四层负载均衡会消耗更多的性能，不过，也相对更加灵活，能够更加智能地路由网络请求，比如说你可以根据请求的内容进行优化如缓存、压缩、加密。</p><p>简单来说，<strong>四层负载均衡性能更强，七层负载均衡功能更强！</strong></p><p>在工作中，我们通常会使用 <strong>Nginx</strong> 来做七层负载均衡，LVS(Linux Virtual Server 虚拟服务器， Linux 内核的 4 层负载均衡)来做四层负载均衡。</p><p>腾讯、eBay 等大厂才会使用到，用的最多的还是 Nginx。</p><h2 id="客户端负载均衡" tabindex="-1"><a class="header-anchor" href="#客户端负载均衡" aria-hidden="true">#</a> 客户端负载均衡</h2><p><strong>客户端负载均衡</strong> 主要应用于系统内部的不同的服务之间，可以使用现成的负载均衡组件来实现。</p><p>在客户端负载均衡中，客户端会自己维护一份服务器的地址列表，发送请求之前，客户端会根据对应的负载均衡算法来选择具体某一台服务器处理请求。</p><p>客户端负载均衡器和服务运行在同一个进程或者说 Java 程序里，不存在额外的网络开销。不过，客户端负载均衡的实现会受到编程语言的限制，比如说 Spring Cloud Load Balancer 就只能用于 Java 语言。</p><p>Java 领域主流的微服务框架 Dubbo、Spring Cloud 等都内置了开箱即用的客户端负载均衡实现。Dubbo 属于是默认自带了负载均衡功能，Spring Cloud 是通过组件的形式实现的负载均衡，属于可选项，比较常用的是 Spring Cloud Load Balancer（官方，推荐） 和 Ribbon（Netflix，已被启用）。</p><p>下图是我画的一个简单的基于 Spring Cloud Load Balancer（Ribbon 也类似） 的客户端负载均衡示意图：</p><h2 id="负载均衡常见的算法有哪些" tabindex="-1"><a class="header-anchor" href="#负载均衡常见的算法有哪些" aria-hidden="true">#</a> 负载均衡常见的算法有哪些？</h2><h3 id="随机法" tabindex="-1"><a class="header-anchor" href="#随机法" aria-hidden="true">#</a> 随机法</h3><p><strong>随机法</strong> 是最简单粗暴的负载均衡算法。</p><p>如果没有配置权重的话，所有的服务器被访问到的概率都是相同的。如果配置权重的话，权重越高的服务器被访问的概率就越大。</p><p>未加权重的随机算法适合于服务器性能相近的集群，其中每个服务器承载相同的负载。加权随机算法适合于服务器性能不等的集群，权重的存在可以使请求分配更加合理化。</p><p>不过，随机算法有一个比较明显的缺陷：部分机器在一段时间之内无法被随机到，毕竟是概率算法，就算是大家权重一样， 也可能会出现这种情况。</p><p>于是，<strong>轮询法</strong> 来了！</p><h3 id="轮询法" tabindex="-1"><a class="header-anchor" href="#轮询法" aria-hidden="true">#</a> 轮询法</h3><p>轮询法是挨个轮询服务器处理，也可以设置权重。</p><p>如果没有配置权重的话，每个请求按时间顺序逐一分配到不同的服务器处理。如果配置权重的话，权重越高的服务器被访问的次数就越多。</p><p>未加权重的轮询算法适合于服务器性能相近的集群，其中每个服务器承载相同的负载。加权轮询算法适合于服务器性能不等的集群，权重的存在可以使请求分配更加合理化。</p><h3 id="一致性-hash-法" tabindex="-1"><a class="header-anchor" href="#一致性-hash-法" aria-hidden="true">#</a> 一致性 Hash 法</h3><p>相同参数的请求总是发到同一台服务器处理，比如同个 IP 的请求。</p><p><strong>最小连接法</strong></p><p>当有新的请求出现时，遍历服务器节点列表并选取其中活动连接数最小的一台服务器来响应当前请求。活动连接数可以理解为当前正在处理的请求数。</p><p>最小连接法可以尽可能最大地使请求分配更加合理化，提高服务器的利用率。不过，这种方法实现起来也最复杂，需要监控每一台服务器处理的请求连接数。</p><p><strong>七层负载均衡可以怎么做？</strong></p><p>简单介绍两种项目中常用的七层负载均衡解决方案：DNS 解析和反向代理。</p><p>除了我介绍的这两种解决方案之外，HTTP 重定向等手段也可以用来实现负载均衡，不过，相对来说，还是 DNS 解析和反向代理用的更多一些，也更推荐一些。</p><p><strong>DNS 解析</strong></p><p>DNS 解析是比较早期的七层负载均衡实现方式，非常简单。</p><p>DNS 解析实现负载均衡的原理是这样的：在 DNS 服务器中为同一个主机记录配置多个 IP 地址，这些 IP 地址对应不同的服务器。当用户请求域名的时候，DNS 服务器采用轮询算法返回 IP 地址，这样就实现了轮询版负载均衡。</p><p><img src="https://pics-cloud.oss-cn-beijing.aliyuncs.com/202303212327373.png" alt="42ee5022-c625-4c6d-99ef-cb98a463aff1 (1)"></p><p>现在的 DNS 解析几乎都支持 IP 地址的权重配置，这样的话，在服务器性能不等的集群中请求分配会更加合理化。像我自己目前正在用的阿里云 DNS 就支持权重配置。</p><p><strong>反向代理</strong></p><p>客户端将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器，获取数据后再返回给客户端。对外暴露的是反向代理服务器地址，隐藏了真实服务器 IP 地址。反向代理“代理”的是目标服务器，这一个过程对于客户端而言是透明的。</p><p>Nginx 就是最常用的反向代理服务器，它可以将接收到的客户端请求以一定的规则（负载均衡策略）均匀地分配到这个服务器集群中所有的服务器上。</p><p>反向代理负载均衡同样属于七层负载均衡。</p><p><img src="https://pics-cloud.oss-cn-beijing.aliyuncs.com/202303212327397.png" alt="3bf9d0c4-b460-4b2c-91bb-2284fe8a5c19"></p><h2 id="客户端负载均衡通常是怎么做的" tabindex="-1"><a class="header-anchor" href="#客户端负载均衡通常是怎么做的" aria-hidden="true">#</a> 客户端负载均衡通常是怎么做的？</h2><p>我们上面也说了，客户端负载均衡可以使用现成的负载均衡组件来实现。</p><p><strong>Netflix Ribbon</strong> 和 <strong>Spring Cloud Load Balancer</strong> 就是目前 Java 生态最流行的两个负载均衡组件。</p><p>Ribbon 是老牌负载均衡组件，由 Netflix 开发，功能比较全面，支持的负载均衡策略也比较多。 Spring Cloud Load Balancer 是 Spring 官方为了取代 Ribbon 而推出的，功能相对更简单一些，支持的负载均衡也少一些。</p><p>Ribbon 支持的 7 种负载均衡策略：</p><ul><li>RandomRule ：随机策略。</li><li>RoundRobinRule（默认） ：轮询策略</li><li>WeightedResponseTimeRule ：权重（根据响应时间决定权重）策略</li><li>BestAvailableRule ：最小连接数策略</li><li>RetryRule：重试策略（按照轮询策略来获取服务，如果获取的服务实例为 null 或已经失效，则在指定的时间之内不断地进行重试来获取服务，如果超过指定时间依然没获取到服务实例则返回 null）</li><li>AvailabilityFilteringRule ：可用敏感性策略（先过滤掉非健康的服务实例，然后再选择连接数较小的服务实例）</li><li>ZoneAvoidanceRule ：区域敏感性策略（根据服务所在区域的性能和服务的可用性来选择服务实例）</li></ul><p>Spring Cloud Load Balancer 支持的 2 种负载均衡策略：</p><ul><li>RandomLoadBalancer ：随机策略</li><li>RoundRobinLoadBalancer（默认） ：轮询策略</li></ul><p>不过，Spring Cloud Load Balancer 支持的负载均衡策略其实不止这两种，ServiceInstanceListSupplier 的实现类同样可以让其支持类似于 Ribbon 的负载均衡策略。这个应该是后续慢慢完善引入的，不看官方文档还真发现不了，所以说阅读官方文档真的很重要！</p><p>这里举两个官方的例子：</p><ul><li>ZonePreferenceServiceInstanceListSupplier ：实现基于区域的负载平衡</li><li>HintBasedServiceInstanceListSupplier ：实现基于 hint 提示的负载均衡</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomLoadBalancerConfiguration</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使用基于区域的负载平衡方法</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ServiceInstanceListSupplier</span> <span class="token function">discoveryClientServiceInstanceListSupplier</span><span class="token punctuation">(</span>
            <span class="token class-name">ConfigurableApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ServiceInstanceListSupplier</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">withDiscoveryClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">withZonePreference</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">withCaching</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>ja
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,68),g={href:"https://docs.spring.io/spring-cloud-commons/docs/current/reference/html/#spring-cloud-loadbalancer",target:"_blank",rel:"noopener noreferrer"},h=s('<p>轮询策略基本可以满足绝大部分项目的需求，我们的实际项目中如果没有特殊需求的话，通常使用的就是默认的轮询策略。并且，Ribbon 和 Spring Cloud Load Balancer 都支持自定义负载均衡策略。</p><p>个人建议如非必需 Ribbon 某个特有的功能或者负载均衡策略的话，就优先选择 Spring 官方提供的 Spring Cloud Load Balancer。</p><p>最后再说说为什么我不太推荐使用 Ribbon 。</p><p>Spring Cloud 2020.0.0 版本移除了 Netflix 除 Eureka 外的所有组件。Spring Cloud Hoxton.M2 是第一个支持 Spring Cloud Load Balancer 来替代 Netfix Ribbon 的版本。</p><p>我们早期学习微服务，肯定接触过 Netflix 公司开源的 Feign、Ribbon、Zuul、Hystrix、Eureka 等知名的微服务系统构建所必须的组件，直到现在依然有非常非常多的公司在使用这些组件。不夸张地说，Netflix 公司引领了 Java 技术栈下的微服务发展。</p><p><img src="https://pics-cloud.oss-cn-beijing.aliyuncs.com/202303212327451.png" alt="b2ac43ef-f3d1-44cf-8f11-e398a9dec838 (1)"></p><p><strong>那为什么 Spring Cloud 这么急着移除 Netflix 的组件呢？</strong> 主要是因为在 2018 年的时候，Netflix 宣布其开源的核心组件 Hystrix、Ribbon、Zuul、Eureka 等进入维护状态，不再进行新特性开发，只修 BUG。于是，Spring 官方不得不考虑移除 Netflix 的组件。</p><p><strong>Spring Cloud Alibaba</strong> 是一个不错的选择，尤其是对于国内的公司和个人开发者来说。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2><ul><li>干货 | eBay 的 4 层软件负载均衡实现：https://mp.weixin.qq.com/s/bZMxLTECOK3mjdgiLbHj-g</li><li>HTTP Load Balancing（Nginx 官方文档）：https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/</li><li>深入浅出负载均衡 - vivo 互联网技术：https://www.cnblogs.com/vivotech/p/14859041.html</li></ul>',10);function b(m,f){const e=l("ExternalLinkIcon");return o(),t("div",null,[c,a("p",null,[n("下图是"),a("a",d,[n("《Java 面试指北》"),i(e)]),n(" 「高并发篇」中的一篇文章的配图，从图中可以看出，系统的商品服务部署了多份在不同的服务器上，为了实现访问商品服务请求的分流，我们用到了负载均衡。")]),u,a("p",null,[n("关于Spring Cloud Load Balancer更详细更新的介绍，推荐大家看看官方文档："),a("a",g,[n("https://docs.spring.io/spring-cloud-commons/docs/current/reference/html/#spring-cloud-loadbalancer"),i(e)]),n(" ，一切以官方文档为主。")]),h])}const k=p(r,[["render",b],["__file","load-balancing.html.vue"]]);export{k as default};
