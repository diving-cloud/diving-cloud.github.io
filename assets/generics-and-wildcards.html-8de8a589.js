import{_ as s,X as n,Y as a,a2 as e}from"./framework-f0219f66.js";const t={},p=e(`<h2 id="通配符" tabindex="-1"><a class="header-anchor" href="#通配符" aria-hidden="true">#</a> 通配符</h2><h3 id="什么是通配符-有什么作用" tabindex="-1"><a class="header-anchor" href="#什么是通配符-有什么作用" aria-hidden="true">#</a> 什么是通配符？有什么作用？</h3><p>泛型类型是固定的，某些场景下使用起来不太灵活，于是，通配符就来了！通配符可以允许类型参数变化，用来解决泛型无法协变的问题。</p><p>举个例子：</p><h3 id="通配符-和常用的泛型-t-之间有什么区别" tabindex="-1"><a class="header-anchor" href="#通配符-和常用的泛型-t-之间有什么区别" aria-hidden="true">#</a> 通配符 ？和常用的泛型 T 之间有什么区别？</h3><ul><li><p>T 可以用于声明变量或常量而 ? 不行。</p></li><li><p>T 一般用于声明泛型类或方法，通配符 ? 一般用于泛型方法的调用代码和形参。</p></li><li><p>T 在编译期会被擦除为限定类型或 Object，通配符用于捕获具体类型。</p></li></ul><h3 id="什么是无界通配符" tabindex="-1"><a class="header-anchor" href="#什么是无界通配符" aria-hidden="true">#</a> 什么是无界通配符？</h3><p>无界通配符可以接收任何泛型类型数据，用于实现不依赖于具体类型参数的简单方法，可以捕获参数类型并交由泛型方法进行处理。 List&lt;?&gt; 和 List 有区别吗？** 当然有！</p><ul><li><p>List&lt;?&gt; list 表示 list 是持有某种特定类型的 List，但是不知道具体是哪种类型。因此，我们添加元素进去的时候会报错。</p></li><li><p>List list 表示 list 是持有的元素的类型是 Object，因此可以添加任何类型的对象，只不过编译器会有警告信息。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div></li></ul><p>List&lt;?&gt; list = new ArrayList&lt;&gt;(); list.add(&quot;sss&quot;);//报错 List list2 = new ArrayList&lt;&gt;(); list2.add(&quot;sss&quot;);//警告信息</p><h3 id="什么是上边界通配符-什么是下边界通配符" tabindex="-1"><a class="header-anchor" href="#什么是上边界通配符-什么是下边界通配符" aria-hidden="true">#</a> 什么是上边界通配符？什么是下边界通配符？</h3><p>在使用泛型的时候，我们还可以为传入的泛型类型实参进行上下边界的限制，如：<strong>类型实参只准传入某种类型的父类或某种类型的子类</strong>。</p><p><strong>上边界通配符 extends</strong> 可以实现泛型的向上转型即传入的类型实参必须是指定类型的子类型。</p><p>举个例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 限制类型为 Person 的子类</span>
<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">// 限制类型为 Manager 的父类</span>
<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Manager</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类型边界可以设置多个，还可以对 T 类型进行限制。</p><p><strong>下边界通配符 super</strong> 与上边界通配符 extends刚好相反，它可以实现泛型的向下转型即传入的类型实参必须是指定类型的父类型。</p><p>举个例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//  限制必须是 Employee 类的父类</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>? extends xxx 和 ? super xxx 有什么区别?</strong></p><p>两者接收参数的范围不同。并且，使用 ? extends xxx 声明的泛型参数只能调用 get() 方法返回 xxx 类型，调用 set() 报错。使用 ? super xxx 声明的泛型参数只能调用 set() 方法接收 xxx 类型，调用 get() 报错。</p><p><strong>T extends xxx 和 ? extends xxx 又有什么区别？</strong></p><p>T extends xxx 用于定义泛型类和方法，擦除后为 xxx 类型， ? extends xxx 用于声明方法形参，接收 xxx 和其子类型。</p><p><strong>Class&lt;?&gt; 和 Class 的区别？</strong></p><p>直接使用 Class 的话会有一个类型警告，使用 Class&lt;?&gt; 则没有，因为 Class 是一个泛型类，接收原生类型会产生警告</p><h3 id="以下代码是否能编译-为什么" tabindex="-1"><a class="header-anchor" href="#以下代码是否能编译-为什么" aria-hidden="true">#</a> 以下代码是否能编译，为什么？</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>

<span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Circle</span><span class="token punctuation">&gt;</span></span> nc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Shape</span><span class="token punctuation">&gt;</span></span>  ns <span class="token operator">=</span> nc<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不能，因为<code>Node&lt;Circle&gt;</code>不是<code>&lt;Shape&gt;</code>的子类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">ChildNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
<span class="token class-name">ChildNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Circle</span><span class="token punctuation">&gt;</span></span> nc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChildNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Circle</span><span class="token punctuation">&gt;</span></span>  ns <span class="token operator">=</span> nc<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以编译，<code>ChildNode&lt;Circle&gt;</code>是<code>Node&lt;Circle&gt;</code>的子类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Number</span> n <span class="token operator">:</span> list<span class="token punctuation">)</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以编译，<code>List&lt;? extends Number&gt;</code> 可以往外取元素，但是无法调用 add() 添加元素。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2><ul><li>Java 官方文档 ： https://docs.oracle.com/javase/tutorial/java/generics/index.html</li><li>Java 基础 一文搞懂泛型：https://www.cnblogs.com/XiiX/p/14719568.html</li></ul>`,34),c=[p];function l(o,i){return n(),a("div",null,c)}const u=s(t,[["render",l],["__file","generics-and-wildcards.html.vue"]]);export{u as default};
