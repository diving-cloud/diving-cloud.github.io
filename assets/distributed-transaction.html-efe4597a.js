const e=JSON.parse('{"key":"v-6ae46042","path":"/distributed-system/distributed-transaction.html","title":"分布式事务详解(付费)","lang":"zh-CN","frontmatter":{"title":"分布式事务详解(付费)","category":"分布式","icon":"transanction","description":"开始聊分布式事务之前，我们先来回顾一下事务相关的概念。 事务 我们设想一个场景，这个场景中我们需要插入多条相关联的数据到数据库，不幸的是，这个过程可能会遇到下面这些问题： 数据库中途突然因为某些原因挂掉了。 客户端突然因为网络原因连接不上数据库了。 并发访问数据库时，多个线程同时写入数据库，覆盖了彼此的更改。 ...... 上面的任何一个问题都可能会导致数据的不一致性。为了保证数据的一致性，系统必须能够处理这些问题。事务就是我们抽象出来简化这些问题的首选机制。事务的概念起源于数据库，目前，已经成为一个比较广泛的概念。","head":[["meta",{"property":"og:url","content":"https://javaguide.cn/distributed-system/distributed-transaction.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"分布式事务详解(付费)"}],["meta",{"property":"og:description","content":"开始聊分布式事务之前，我们先来回顾一下事务相关的概念。 事务 我们设想一个场景，这个场景中我们需要插入多条相关联的数据到数据库，不幸的是，这个过程可能会遇到下面这些问题： 数据库中途突然因为某些原因挂掉了。 客户端突然因为网络原因连接不上数据库了。 并发访问数据库时，多个线程同时写入数据库，覆盖了彼此的更改。 ...... 上面的任何一个问题都可能会导致数据的不一致性。为了保证数据的一致性，系统必须能够处理这些问题。事务就是我们抽象出来简化这些问题的首选机制。事务的概念起源于数据库，目前，已经成为一个比较广泛的概念。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-19T11:39:05.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-19T11:39:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分布式事务详解(付费)\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-19T11:39:05.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"事务","slug":"事务","link":"#事务","children":[]},{"level":2,"title":"数据库事务","slug":"数据库事务","link":"#数据库事务","children":[]},{"level":2,"title":"分布式事务","slug":"分布式事务","link":"#分布式事务","children":[{"level":3,"title":"柔性事务","slug":"柔性事务","link":"#柔性事务","children":[]},{"level":3,"title":"刚性事务","slug":"刚性事务","link":"#刚性事务","children":[]}]},{"level":2,"title":"","slug":"","link":"#","children":[{"level":3,"title":"2PC（两阶段提交协议）","slug":"_2pc-两阶段提交协议","link":"#_2pc-两阶段提交协议","children":[]},{"level":3,"title":"3PC（三阶段提交协议）","slug":"_3pc-三阶段提交协议","link":"#_3pc-三阶段提交协议","children":[]}]},{"level":2,"title":"TCC（补偿事务）","slug":"tcc-补偿事务","link":"#tcc-补偿事务","children":[]},{"level":2,"title":"MQ 事务","slug":"mq-事务","link":"#mq-事务","children":[]},{"level":2,"title":"Saga","slug":"saga","link":"#saga","children":[]},{"level":2,"title":"分布式事务开源项目","slug":"分布式事务开源项目","link":"#分布式事务开源项目","children":[]}],"git":{"createdTime":1636454878000,"updatedTime":1679225945000,"contributors":[{"name":"guide","email":"koushuangbwcx@163.com","commits":20},{"name":"Guide","email":"koushuangbwcx@163.com","commits":1},{"name":"diving-cloud","email":"43922483+diving-cloud@users.noreply.github.com","commits":1},{"name":"hezongkui","email":"zongkuihe@gmail.com","commits":1}]},"readingTime":{"minutes":24.6,"words":7380},"filePathRelative":"distributed-system/distributed-transaction.md","localizedDate":"2021年11月9日","excerpt":"<p>开始聊分布式事务之前，我们先来回顾一下事务相关的概念。</p>\\n<h2> 事务</h2>\\n<p>我们设想一个场景，这个场景中我们需要插入多条相关联的数据到数据库，不幸的是，这个过程可能会遇到下面这些问题：</p>\\n<ul>\\n<li>数据库中途突然因为某些原因挂掉了。</li>\\n<li>客户端突然因为网络原因连接不上数据库了。</li>\\n<li>并发访问数据库时，多个线程同时写入数据库，覆盖了彼此的更改。</li>\\n<li>......</li>\\n</ul>\\n<p>上面的任何一个问题都可能会导致数据的不一致性。为了保证数据的一致性，系统必须能够处理这些问题。事务就是我们抽象出来简化这些问题的首选机制。事务的概念起源于数据库，目前，已经成为一个比较广泛的概念。</p>","copyright":{},"autoDesc":true}');export{e as data};
